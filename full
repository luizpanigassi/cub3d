header:

#ifndef CUB3D_H
# define CUB3D_H

# include "libft.h"
# include <stdio.h>
# include <fcntl.h>
# include <string.h>
# include <unistd.h>
# include <stdlib.h>

# define MAP_CHARS " 01NSEW"
# define PLAYER_CHARS "NSEW"

typedef struct s_data
{
	char	*north;
	char	*south;
	char	*east;
	char	*west;
	char	**map;
	char	player_direction;
	int		floor;
	int		ceiling;
	int		map_width;
	int		map_height;
	int		player_x;
	int		player_y;
}	t_data;

typedef struct s_parse_ctx
{
	t_data	*data;
	t_list	**map_lines;
	int		*max_width;
}	t_parse_ctx;

// ERROR HANDLER
int		error_exit(char *msg, t_data *data);

// MAIN

// MAP VALIDATOR
void	validate_map_char_at(t_data *data, int x, int y, int *player_count);
void	validate_map_chars(t_data *data);
void	validate_map_boundaries(t_data *data);

// CUB PARSER
void	parse_lines_loop(int fd, t_data *data,
			t_list **map_lines, int *max_width);
void	check_required_elements(t_data *data);
t_data	*parse_cub_file(char *filename);

// PARSER
int		parse_rgb_component(char *part, int *value);
int		parse_rgb(char **parts, int *rgb);
int		parse_color(char *line, t_data *data, char id);
int		parse_texture(char *line, t_data *data, const char *id);
int		parse_color_line(char *trimmed, t_data *data);

// MAP PROCESSING UTILS
void	copy_map_lines(t_data *data, t_list *map_lines, int max_width);
void	process_trimmed_line(char *trimmed, int *map_started, t_parse_ctx *ctx);
void	allocate_and_fill_map(t_data *data, t_list *map_lines, int max_width);
void	add_map_line(char *trimmed, t_list **map_lines, int *max_width);

// MAP UTILS
int		parse_texture_line(char *trimmed, t_data *data);
int		handle_non_map_line(char *trimmed,
			t_data *data, t_list **map_lines, int *max_width);
void	handle_map_line(char *trimmed, t_list **map_lines, int *max_width);

// UTILS
void	ft_free_array(char **array);
int		ft_isdigit_str(char *str);
void	free_data(t_data *data);
int		ft_strcmp(const char *s1, const char *s2);
char	*trim_and_free_line(char *line);

#endif

error_handler.c

#include "cub3d.h"

int	error_exit(char *msg, t_data *data)
{
	if (data)
		free_data(data);
	ft_putstr_fd("Error\n", 2);
	ft_putstr_fd(msg, 2);
	ft_putstr_fd("\n", 2);
	exit(1);
}

main.c

#include "cub3d.h"

int	main(int argc, char **argv)
{
	char	*ext;
	t_data	*data;

	if (argc != 2)
		error_exit("Usage: ./cub3D <map.cub>", NULL);

	// Validate file extension
	ext = ft_strrchr(argv[1], '.');
	if (!ext || ft_strcmp(ext, ".cub"))
		error_exit("Invalid file extension", NULL);

	// Parse and validate map file
	data = parse_cub_file(argv[1]);

	// Clean exit (error_exit handles memory cleanup)
	error_exit("", data);
	return (0);
}

map_validator.c

#include "cub3d.h"

void	validate_map_char_at(t_data *data, int x, int y, int *player_count)
{
	char	c;

	c = data->map[y][x];
	if (!ft_strchr(MAP_CHARS, c))
		error_exit("Wait, your map has invalid characters!", data);
	if (ft_strchr(PLAYER_CHARS, c))
	{
		(*player_count)++;
		data->player_x = x;
		data->player_y = y;
		data->player_direction = c;
	}
}

void	validate_map_chars(t_data *data)
{
	int	player_count;
	int	y;
	int	x;

	y = 0;
	player_count = 0;
	while (y < data->map_height)
	{
		x = 0;
		while (x < data->map_width)
		{
			validate_map_char_at(data, x, y, &player_count);
			x++;
		}
		y++;
	}
	if (player_count != 1)
		error_exit("Wait, there's too many players in the map!", data);
}

void	validate_map_boundaries(t_data *data)
{
	int		y;
	int		x;
	char	c;

	y = 0;
	while (y < data->map_height)
	{
		x = 0;
		while (x < data->map_width)
		{
			c = data->map[y][x];
			if (c == '0' || ft_strchr("NSEW", c))
			{
				if (x == 0 || x == data->map_width - 1
					|| y == 0 || y == data->map_height - 1)
					error_exit("Wait, you need to plug that hole in your map!",
						data);
			}
			x++;
		}
		y++;
	}
}

parser_cub.c

#include "cub3d.h"

void	parse_lines_loop(int fd, t_data *data,
	t_list **map_lines, int *max_width)
{
	char		*line;
	char		*trimmed;
	int			map_started;
	t_parse_ctx	ctx;

	map_started = 0;
	ctx.data = data;
	ctx.map_lines = map_lines;
	ctx.max_width = max_width;
	line = get_next_line(fd);
	while (line)
	{
		trimmed = trim_and_free_line(line);
		if (!trimmed)
		{
			line = get_next_line(fd);
			continue ;
		}
		process_trimmed_line(trimmed, &map_started, &ctx);
	line = get_next_line(fd);
	}
}

void	check_required_elements(t_data *data)
{
	if (!data->north || !data->south || !data->east
		||!data->west || data->floor == -1 || data->ceiling == -1)
		error_exit("There's something missing in your map!", data);
}

t_data	*parse_cub_file(char *filename)
{
	int		fd;
	t_data	*data;
	t_list	*map_lines;
	int		max_width;

	fd = open(filename, O_RDONLY);
	if (fd < 0)
		error_exit("Something is wrong with the file!", NULL);
	data = ft_calloc(1, sizeof(t_data));
	if (!data)
		error_exit("Memory allocation failed!", NULL);
	data->floor = -1;
	data->ceiling = -1;
	map_lines = NULL;
	max_width = 0;
	parse_lines_loop(fd, data, &map_lines, &max_width);
	close(fd);
	printf("N: %s\nS: %s\nE: %s\nW: %s\nF: %d\nC: %d\n",
	data->north, data->south, data->east, data->west,
	data->floor, data->ceiling);
	check_required_elements(data);
	allocate_and_fill_map(data, map_lines, max_width);
	ft_lstclear(&map_lines, free);
	validate_map_chars(data);
	validate_map_boundaries(data);
	return (data);
}

parsers.c

#include "cub3d.h"

int	parse_rgb_component(char *part, int *value)
{
	char	*trimmed;
	int		res;

	trimmed = ft_strtrim(part, " \t\n");
	if (!trimmed || !ft_isdigit_str(trimmed))
	{
		free(trimmed);
		return (0);
	}
	res = ft_atoi(trimmed);
	free(trimmed);
	if (res < 0 || res > 255)
		return (0);
	*value = res;
	return (1);
}

int	parse_rgb(char **parts, int *rgb)
{
	int	i;

	i = 0;
	while (i < 3)
	{
		if (!parse_rgb_component(parts[i], &rgb[i]))
			return (0);
		i++;
	}
	return (1);
}

int	parse_color(char *line, t_data *data, char id)
{
	char	**parts;
	int		rgb[3];
	int		color;

	if ((id == 'F' && data->floor != -1) || (id == 'C' && data->ceiling != -1))
		return (0);
	parts = ft_split(line, ',');
	if (!parts || !parts[0] || !parts[1] || !parts[2] || parts[3])
		return (ft_free_array(parts), 0);
	if (!parse_rgb(parts, rgb))
		return (ft_free_array(parts), 0);
	color = (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
	if (id == 'F')
		data->floor = color;
	else if (id == 'C')
		data->ceiling = color;
	ft_free_array(parts);
	return (1);
}

int	parse_texture(char *line, t_data *data, const char *id)
{
	char	*path;

	path = ft_strtrim(line + 3, " \t");
	if (!path)
		return (0);
	if (access(path, R_OK))
	{
		free(path);
		return (0);
	}
	if (!ft_strcmp(id, "NO"))
		data->north = path;
	else if (!ft_strcmp(id, "SO"))
		data->south = path;
	else if (!ft_strcmp(id, "EA"))
		data->east = path;
	else if (!ft_strcmp(id, "WE"))
		data->west = path;
	else
	{
		free(path);
		return (0);
	}
	return (1);
}

int	parse_color_line(char *trimmed, t_data *data)
{
	if (trimmed[0] == 'F' && ft_isspace(trimmed[1]))
	{
		if (!parse_color(trimmed + 2, data, 'F'))
			error_exit("Invalid floor color!", data);
		return (1);
	}
	else if (trimmed[0] == 'C' && ft_isspace(trimmed[1]))
	{
		if (!parse_color(trimmed + 2, data, 'C'))
			error_exit("Invalid ceiling color!", data);
		return (1);
	}
	return (0);
}


map_processing_utils.c

#include "cub3d.h"

void	copy_map_lines(t_data *data, t_list *map_lines, int max_width)
{
	t_list	*tmp;
	int		i;

	tmp = map_lines;
	i = 0;
	while (tmp)
	{
		data->map[i] = ft_calloc(max_width + 1, sizeof(char));
		if (!data->map[i])
			error_exit("Memory allocation failed for map line!", data);
		ft_memset(data->map[i], ' ', max_width);
		ft_memcpy(data->map[i], tmp->content, ft_strlen(tmp->content));
		tmp = tmp->next;
		i++;
	}
}

void	process_trimmed_line(char *trimmed, int *map_started, t_parse_ctx *ctx)
{
	int	res;

	if (!*map_started)
	{
		res = handle_non_map_line(trimmed, ctx->data,
				ctx->map_lines, ctx->max_width);
		if (res == 2)
			*map_started = 1;
	}
	else
	{
		handle_map_line(trimmed, ctx->map_lines, ctx->max_width);
	}
}

void	allocate_and_fill_map(t_data *data, t_list *map_lines, int max_width)
{
	data->map_height = ft_lstsize(map_lines);
	data->map_width = max_width;
	data->map = ft_calloc(data->map_height + 1, sizeof(char *));
	if (!data->map)
		error_exit("Memory allocation failed for map!", data);
	copy_map_lines(data, map_lines, max_width);
}

void	add_map_line(char *trimmed, t_list **map_lines, int *max_width)
{
	int	len;

	len = ft_strlen(trimmed);
	if (len > *max_width)
		*max_width = len;
	ft_lstadd_back(map_lines, ft_lstnew(ft_strdup(trimmed)));
	free(trimmed);
}

map_utils.c

#include "cub3d.h"

int	parse_texture_line(char *trimmed, t_data *data)
{
	printf("TRYING TO PARSE TEXTURE: '%s'\n", trimmed); // DEBUG
	if (!ft_strncmp(trimmed, "NO", 2) && ft_isspace(trimmed[2]))
		return (parse_texture(trimmed, data, "NO"));
	else if (!ft_strncmp(trimmed, "SO", 2) && ft_isspace(trimmed[2]))
		return (parse_texture(trimmed, data, "SO"));
	else if (!ft_strncmp(trimmed, "WE", 2) && ft_isspace(trimmed[2]))
		return (parse_texture(trimmed, data, "WE"));
	else if (!ft_strncmp(trimmed, "EA", 2) && ft_isspace(trimmed[2]))
		return (parse_texture(trimmed, data, "EA"));
	return (0);
}

int	handle_non_map_line(char *trimmed,
	t_data *data, t_list **map_lines, int *max_width)
{
	if (!*trimmed)
	{
		free(trimmed);
		return (1);
	}
	if (parse_texture_line(trimmed, data))
	{
		free(trimmed);
		return (1);
	}
	else if (parse_color_line(trimmed, data))
	{
		free(trimmed);
		return (1);
	}
	else if (ft_strchr(MAP_CHARS, *trimmed))
	{
		add_map_line(trimmed, map_lines, max_width);
		return (2);
	}
	free(trimmed);
	return (0);
}


void	handle_map_line(char *trimmed, t_list **map_lines, int *max_width)
{
	add_map_line(trimmed, map_lines, max_width);
}

utils.c

#include "cub3d.h"

void	ft_free_array(char **array)
{
	int	i;

	if (!array)
		return ;
	i = 0;
	while (array[i])
	{
		free(array[i]);
		i++;
	}
	free(array);
}

int	ft_isdigit_str(char *str)
{
	while (*str)
	{
		if (!ft_isdigit(*str))
			return (0);
		str++;
	}
	return (1);
}

void	free_data(t_data *data)
{
	int	i;

	if (!data)
		return ;
	if (data->north)
		free(data->north);
	if (data->south)
		free(data->south);
	if (data->east)
		free(data->east);
	if (data->west)
		free(data->west);
	if (data->map)
	{
		i = 0;
		while (data->map[i])
			free(data->map[i++]);
		free(data->map);
	}
	free(data);
}

int	ft_strcmp(const char *s1, const char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*(unsigned char *)s1 - *(unsigned char *)s2);
}

char	*trim_and_free_line(char *line)
{
	char	*trimmed;

	trimmed = ft_strtrim(line, " \t\n");
	free(line);
	return (trimmed);
}
